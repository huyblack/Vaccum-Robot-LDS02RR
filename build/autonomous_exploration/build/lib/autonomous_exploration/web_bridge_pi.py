#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from nav_msgs.msg import OccupancyGrid, Odometry
import asyncio
import websockets
import json
import threading
import math
import time

def euler_from_quaternion(x, y, z, w):
    """
    Chuy·ªÉn ƒë·ªïi Quaternion (d·ªØ li·ªáu ƒë·ªãnh h∆∞·ªõng c·ªßa ROS) sang g√≥c Euler (yaw).
    """
    t3 = +2.0 * (w * z + x * y)
    t4 = +1.0 - 2.0 * (y * y + z * z)
    yaw_z = math.atan2(t3, t4)
    return yaw_z

class WebBridgePi:
    """
    Phi√™n b·∫£n t·ªëi ∆∞u cho Raspberry Pi v·ªõi throttling v√† error handling.
    """
    def __init__(self, node: Node):
        self._node = node
        self._logger = node.get_logger()
        
        # --- C·∫•u h√¨nh t·ªëi ∆∞u cho Pi ---
        self.port = 8765
        self.host = "0.0.0.0"  # Cho ph√©p k·∫øt n·ªëi t·ª´ m·∫°ng
        self.clients = set()
        self.server_loop = None
        
        # --- Throttling ƒë·ªÉ ti·∫øt ki·ªám t√†i nguy√™n ---
        self.last_map_time = 0
        self.last_odom_time = 0
        self.map_throttle = 2.0  # Gi√¢y - Map update √≠t h∆°n
        self.odom_throttle = 0.5  # Gi√¢y - Odom update th∆∞·ªùng xuy√™n h∆°n
        
        # --- L∆∞u tr·ªØ d·ªØ li·ªáu ---
        self.last_map_data = None
        self.last_odom_data = None
        
        self._logger.info("üöÄ Kh·ªüi t·∫°o Web Bridge cho Pi...")

    def start(self):
        """Kh·ªüi ƒë·ªông c√°c th√†nh ph·∫ßn c·ªßa bridge."""
        try:
            # --- T·∫°o Subscribers ---
            self._node.create_subscription(OccupancyGrid, '/map', self.map_callback, 10)
            self._node.create_subscription(Odometry, '/odom', self.odom_callback, 10)
            
            # --- Kh·ªüi ƒë·ªông WebSocket Server trong m·ªôt thread ri√™ng ---
            server_thread = threading.Thread(target=self.start_server_thread, daemon=True)
            server_thread.start()
            
            self._logger.info(f"‚úÖ Web Bridge ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng")
        except Exception as e:
            self._logger.error(f"‚ùå L·ªói kh·ªüi ƒë·ªông Web Bridge: {e}")

    def start_server_thread(self):
        """H√†m target cho thread c·ªßa server, thi·∫øt l·∫≠p v√† ch·∫°y event loop."""
        try:
            self.server_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.server_loop)
            
            self.server_loop.run_until_complete(self.server_main())
        except Exception as e:
            self._logger.error(f"‚ùå L·ªói server thread: {e}")
        finally:
            if self.server_loop:
                self.server_loop.close()

    async def server_main(self):
        """Logic ch√≠nh c·ªßa server, ch·∫°y v√¥ t·∫≠n."""
        try:
            self._logger.info(f"üõ∞Ô∏è  WebSocket Server ƒëang l·∫Øng nghe tr√™n {self.host}:{self.port}")
            async with websockets.serve(self.handler, self.host, self.port):
                await asyncio.Future()
        except Exception as e:
            self._logger.error(f"‚ùå L·ªói WebSocket server: {e}")

    async def handler(self, websocket):
        """X·ª≠ l√Ω c√°c k·∫øt n·ªëi m·ªõi t·ª´ client."""
        client_ip = websocket.remote_address[0] if websocket.remote_address else "unknown"
        self._logger.info(f"‚úÖ Client m·ªõi k·∫øt n·ªëi t·ª´ {client_ip}")
        
        self.clients.add(websocket)
        try:
            # G·ª≠i d·ªØ li·ªáu hi·ªán t·∫°i ngay khi client k·∫øt n·ªëi
            if self.last_map_data or self.last_odom_data:
                initial_data = {
                    'map': self.last_map_data,
                    'odom': self.last_odom_data,
                    'timestamp': time.time()
                }
                await websocket.send(json.dumps(initial_data))
                self._logger.info(f"üì§ ƒê√£ g·ª≠i d·ªØ li·ªáu ban ƒë·∫ßu cho {client_ip}")

            # Gi·ªØ k·∫øt n·ªëi m·ªü
            await websocket.wait_closed()
        except websockets.exceptions.ConnectionClosed:
            self._logger.info(f"‚ÑπÔ∏è  Client {client_ip} ƒë√£ ng·∫Øt k·∫øt n·ªëi")
        except Exception as e:
            self._logger.warning(f"‚ö†Ô∏è  L·ªói k·∫øt n·ªëi v·ªõi client {client_ip}: {e}")
        finally:
            self.clients.discard(websocket)

    def map_callback(self, msg):
        """X·ª≠ l√Ω d·ªØ li·ªáu b·∫£n ƒë·ªì v·ªõi throttling."""
        current_time = time.time()
        if current_time - self.last_map_time < self.map_throttle:
            return
        
        self.last_map_time = current_time
        self._logger.info("üó∫Ô∏è  ƒê√£ nh·∫≠n d·ªØ li·ªáu Map m·ªõi")
        
        try:
            # Ch·ªâ l∆∞u th√¥ng tin c∆° b·∫£n ƒë·ªÉ ti·∫øt ki·ªám memory
            map_info = {
                'type': 'map',
                'timestamp': current_time,
                'info': {
                    'resolution': float(msg.info.resolution),
                    'width': int(msg.info.width),
                    'height': int(msg.info.height),
                    'origin': {
                        'x': float(msg.info.origin.position.x), 
                        'y': float(msg.info.origin.position.y)
                    },
                },
                'data_size': len(msg.data),
                'data': list(msg.data) if len(msg.data) < 10000 else None  # Gi·ªõi h·∫°n data size
            }
            
            if map_info['data'] is None:
                map_info['message'] = f"Map qu√° l·ªõn ({len(msg.data)} cells), ch·ªâ g·ª≠i metadata"
            
            self.last_map_data = map_info
            self.broadcast(map_info)
        except Exception as e:
            self._logger.error(f"‚ùå L·ªói x·ª≠ l√Ω map callback: {e}")
        
    def odom_callback(self, msg):
        """X·ª≠ l√Ω d·ªØ li·ªáu odometry v·ªõi throttling."""
        current_time = time.time()
        if current_time - self.last_odom_time < self.odom_throttle:
            return
            
        self.last_odom_time = current_time
        
        try:
            q = msg.pose.pose.orientation
            yaw = euler_from_quaternion(q.x, q.y, q.z, q.w)

            odom_info = {
                'type': 'odom',
                'timestamp': current_time,
                'pose': {
                    'position': {
                        'x': float(msg.pose.pose.position.x), 
                        'y': float(msg.pose.pose.position.y)
                    },
                    'orientation_yaw': float(yaw)
                }
            }
            self.last_odom_data = odom_info
            self.broadcast(odom_info)
        except Exception as e:
            self._logger.error(f"‚ùå L·ªói x·ª≠ l√Ω odom callback: {e}")
        
    def broadcast(self, message_data):
        """G·ª≠i message t·ªõi t·∫•t c·∫£ c√°c client."""
        if not self.clients:
            return
        
        try:
            message_json = json.dumps(message_data)
            
            # ƒê·∫£m b·∫£o r·∫±ng coroutine ƒë∆∞·ª£c ch·∫°y tr√™n ƒë√∫ng event loop c·ªßa server
            if self.server_loop and self.server_loop.is_running():
                asyncio.run_coroutine_threadsafe(self.send_to_all(message_json), self.server_loop)
        except Exception as e:
            self._logger.error(f"‚ùå L·ªói broadcast: {e}")

    async def send_to_all(self, message_json):
        """H√†m async ƒë·ªÉ g·ª≠i d·ªØ li·ªáu."""
        if not self.clients:
            return
            
        tasks = []
        for client in self.clients.copy():  # Copy ƒë·ªÉ tr√°nh modification during iteration
            try:
                tasks.append(client.send(message_json))
            except Exception as e:
                self._logger.warning(f"‚ö†Ô∏è  L·ªói chu·∫©n b·ªã g·ª≠i ƒë·∫øn client: {e}")
                self.clients.discard(client)
        
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

def main(args=None):
    rclpy.init(args=args)
    
    # T·∫°o node ROS2
    node = rclpy.create_node('web_bridge_pi_node')
    
    # T·∫°o v√† kh·ªüi ƒë·ªông bridge
    bridge = WebBridgePi(node)
    bridge.start()
    
    try:
        # Gi·ªØ cho node ROS ho·∫°t ƒë·ªông
        node.get_logger().info("üîÑ Web Bridge Pi ƒëang ch·∫°y...")
        rclpy.spin(node)
    except KeyboardInterrupt:
        print("\n[INFO] T·∫Øt c·∫ßu n·ªëi Web...")
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main() 